String 클래스의 특징
-> 문자형 변수를 인스턴스로 선언하고 있다(문자열을 다루는 메소드들도 같이 선언되어있음)
-> final로 선언되어 다른 클래스의 부모클래스가 될 수 없고, 한번 선언된 String인스턴스의 내용은 변경될 수 없다
(String을 리터럴로 선언하면 String Pool에 문자열이 저장되고 그 주소를 String참조변수가 가리키는식 이므로 실제로 String인스턴스를 변경하는게 아니다)
-> 문자열을 덧셈연산하여 String참조변수에 할당하면 새로운 문자열이 생성되고 그 새로운주소를 또 가리키는 식이므로 비효율적, 그래서 StringBuffer를 쓴다
-> 소스파일을 컴파일할 때 클래스파일이 생성됨, 이 때 Constant Pool이 생성되는데 여기에 리터럴로 선언된 문자열 등이 저장된다
즉, 모든 클래스파일은 클래스내에서 사용하는 상수들의 목록을 가지고 있고 JVM도 같은걸 가지고 있는데, JVM에 클래스 상수들의 Constant Pool이 저장되면서 String인스턴스들이 생성됨

빈 문자열
-> 자바에서는 크기가0인 문자열 생성 가능
(C언어에서는 문자열의 끝을 null값으로 정의하지만 자바에서는 문자열의 길이를 따로 관리해주므로 빈칸을 할당해주면 크기가 0인 문자열을 생성할 수 있다)
-> String str="";은 가능하지만 char c='';는 불가능
-> 가급적이면 String은 참조형의 기본값인 null보다 빈 문자열("")로 초기화하고 char형은 기본값인 '\u0000'보다 공백(' ')로 초기화하자
-> 빈 문자열은 하나의 String인스턴스를 공유하므로 많은 String참조변수들을 할당해도 상관없다
-> public static void main(String[] args){}의 args객체에 cmd에서 아무것도 넘겨주지 않으면 null이 아니라 빈 문자열이 할당된다

String클래스의 생성자와 메소드

String(String s)
String(char[] value)
String(StringBuffer buf)
char charAt(int index)
String concat(String str) : 덧셈연산자로 더하는것보다 성능은 좋으나 가독성이 떨어지므로 꼭 필요할 때만 쓰자
boolean contains(CharSequence s) : CharSequence는 CharBuffer, Segment, String, StringBuffer, StringBuilder 등을 구현한 인터페이스이다
즉, 위에 상기한 클래스들을 매개변수로 받아서 지정된 문자열에 포함되었는지 검사하고 boolean을 리턴한다
boolean endsWith(String suffix) : 지정된 문자열로 끝나는지 검사하고 boolean을 리턴
boolean equals(Object obj) : 매개변수로 받은 문자열(obj)과 String인스턴스의 문자열을 비교한다, obj가 String이 아니거나 문자열이 다르면 false리턴
boolean equalsIgnoreCase(String str) : 문자열과 String인스턴스 문자열을 대소문자 구분없이 비교한다
int indexOf(int ch) : 주어진 문자(ch)가 문자열에 존재하는지 확인하여 위치(index)를 알려준다, 없으면 -1을 반환
(매개변수에 char형 넣어도 int형으로 변환되면서 숫자로 들어간다, 유니코드가 확장되면서 char형으로 표현할 수 있는 범위를 넘어감)

유니코드
-> 아스키코드의 상위개념, 아스키코드와 다르게 2개의 문자로 표현하며 유니코드 문자를 숫자로 바꾸는 메소드는 int toCodepoint(char high, char low)

따라서 보통 매개변수가 int형인 메소드는 확장된 유니코드를 지원하고 char형인 메소드는 그렇지 않다

int indexOf(String str) : 주어진 문자열이 존재한느지 확인하여 index리턴, 없으면 -1리턴
String intern() : 문자열을 constant pool에 등록한다. 이미 있을경우 그 문자열의 주소값 리턴
int lastIndexOf(int ch) : 지정된 문자 또는 문자코드를 문자열의 오른쪽 끝에서부터 찾아서 index리턴, 없으면 -1(찾는 방향만 다를뿐 리턴하는 인덱스기준은 동일)
int length() : 문자열의 길이 리턴
String replace(char old, char nw) : 문자열 중의 문자(old)를 새로운 문자(nw)로 바꾼 문자열을 리턴(매개변수가 char형이므로 확장된 유니코드를 지원하지 않는다)
String replaceAll(String regex, String replacement) : 문자열 중에서 지정된 문자열과 일치하는 것을 새로운 문자열로 모두 변경
String replaceFirst(String regex, String replacement) : 문자열 중에서 지정된 문자열과 일치하는 것 중, 첫 번째 것만 새로운 문자열로 변경
String[] split(String regex) : 문자열을 지정된 분리자로 나누어 문자열 배열에 담아 반환
ex)String animals="dog,cat,bear";
String] arr=animals.split(",");
//arr[0]="dog"
//arr[1]="cat"
//arr[2]="bear"
String split(String regex, int limit) : 문자열을 지정된 분리자로 나누어 문자열배열에 담아 반환한다. 단, 문자열 전체를 최대 지정된 갯수로 자른다
boolean startsWith(String prefix) : 주어진 문자열로 시작하는지 검사
String substring(int begin) : 주어진 index부터 문자열 리턴
String substring(int begin, int end) : 주어진 index부터 두번째 index전까지의 문자열 리턴
String toLowerCase() : String인스턴스에 저장되어있는 모든 문자열 소문자로 변환
String toUpperCase() : 문자열 대문자로
String toString() : String인스턴스에 저장되어있는 문자열 리턴
String trim() : 문자열의 왼쪽끝과 오른쪽 끝에있는 공백을 없앤 결과를 리턴, 문자열 중간에 있는 공백은 제거되지않음
static String valueOf(boolean b) : primitive타입의 변수를 문자열로 리턴(+"" 방식이 더 가독성이 좋으므로 성능향상이 필요한 경우에만 사용하자)
static String valueOf(char c)
static String valueOf(int i)
.... 등

-> 문자열의 내용이 변경될때는 항상 새로운 문자열이 생성되어 변경된다

문자열과 기본형간의 변환
-> 기본형을 문자열로 : i+"", String.valueOf(i)
-> 문자열을 기본형으로 : Integer.parseInt() 문자열을 정수로, Integer.valueOf() 문자열을 정수로, .charAt() 문자열 1개를 문자1개로
Integer.valueOf() 메소드는 원래 Integer객체를 리턴하지만 jdk1.5버전 이후부터는 오토박싱 기능에 의해서 자동으로 int형으로 리턴하게 된다
getBoolean(), parseBoolean(), parseByte(), parseShort(), parseInt(), parseLong(), parseFloat(), parseDouble()
Integer.valueOf(), Double.valueOf(), Float.valueOf() 등

StringBuffer클래스의 특징
-> String처럼 문자형 배열(char[])을 내부적으로 가지고 있다
-> 그러나, String클래스와 달리 내용을 변경할 수 있다(mutable)
-> 인스턴스를 생성할 때 버퍼의 크기를 충분히 지정해주는 것이 좋다
(버퍼가 작으면 성능저하 - 작업 중에 더 큰 배열 생성해서 기존내용을 복사하므로)
-> String객체를 매개변수로 받으면 자동으로 StringBuffer의 길이를 String의 길이+16으로 지정해주지만, 보통 String길이의 2배로 하는게 좋다
-> StringBuffer의 길이가 저장하기에 부족하게되면 공간을 2배로 늘린다
-> String클래스와 달리 equals메소드를 오버라이딩 하지 않았다(따라서 StringBuffer를 비교하려면 toString메소드를와 equals메소드를 동시에 사용해야한다)

StringBuilder클래스
-> StringBuffer클래스와 완전 동일하지만 멀티쓰레드에 대해 동기화처리가 되어있지않다는 점에서 다르다
(따라서, 싱글쓰레드에서는 StringBuilder클래스를 쓰면 된다)

StringBuffer클래스의 생성자와 메소드

StringBuffer() : 16문자를 담을 수 있는 버퍼를 가진 인스턴스를 생성
StringBuffer(int length) :  지정된 갯수의 문자를 담을 수 있는 버퍼를 가진 StringBuffer인스턴스를 생성
StringBuffer(String str) : 지정된 문자열 값(str)을 갖는 StringBuffer 인스턴스를 생성
StringBuffer append(boolean b) : 매개변수로 입력된 값을 문자열로 변환하여 StringBuffer인스턴스가 저장하고 있는 문자열의 뒤에 덧붙인다
StringBuffer append(char[] str)	굳이 리턴값이 필요없는 메소드이지만 .append.append처럼 이어서 쓸 수있게 하기위해 리턴값을 갖게 해두었다
StringBuffer append(float f)
StringBuffer append(long l)
StringBuffer append(String str)
StringBuffer append(char c)
StringBuffer append(double d)
StringBuffer append(int i)
StringBuffer append(Object obj)
int capacity() : StringBuffer인스턴스의 크기를 리턴함, length()는 버퍼에 담긴 문자열의 크기를 리턴
char charAt(int index) : 지정된 위치(index)에 있는 문자를 리턴
StringBuffer delete(int start, int end) : start부터 end전까지 삭제
StringBuffer deleteCharAt(int index) : index의 문자를 제거
StringBuffer insert(int pos, boolean b) : 두번째 매개변수로 받을값을 문자열로 변환하여 지정된위치에 추가한다
StringBuffer insert(int pos, char[] str)
StringBuffer insert(int pos, float f)
StringBuffer insert(int pos, double d)
StringBuffer insert(int pos, Object obj)
StringBuffer insert(int pos, char c)
StringBuffer insert(int pos, int i)
StringBuffer insert(int pos, long l)
StringBuffer insert(int pos, String str)
int length() : StringBuffer인스턴스에 저장되어있는 문자열의 길이를 반환
StringBuffer replace(int start, int end, String str) : start부터 end전까지의 문자들을 주어진 문자열로 바꾼다(길이는 달라도 상관없음)
StringBuffer reverse() : StringBuffer인스턴스에 저장되어 있는 문자열의 순서를 거꾸로 나열한다
void setCharAt(int index, char ch) : index의 문자를 주어진 문자로 바꾼다
void setLength(int newLength) : 지정된 문자열의 길이를 변경한다, 크기를 늘리는 경우에 나머지 빈공간을 널문자 '\u0000'로 채운다
String toString() : StringBuffer인스턴스의 문자열을 String으로 반환한다(StringBuffer는 equals()가 오버라이딩 되어있지 않기 때문에 String으로 변환해서 비교해야함)
String substring(int start)
String substring(int start, int end)

Math클래스
-> 수학계산에 유용한 메소드로 구성(상수 PI, E, static메소드들)

static int abs(int f) : 주어진 값의 절대값을 리턴
static int abs(long f)
static int abs(float f)
static int abs(double f)
static double ceil(double a) : 올림
static double floor(double a) : 내림
static int min(int a, int b) : 둘 중 작은 값 리턴(특정 변수가 지정된 범위에 있는지 확인하는 코드 작성 가능)
static long min(long a, long b)
static double min(double a, double b)
static float min(float a, float b)
static int max(int a, int b) : 둘 중 큰 값 리턴
static long max(long a, long b)
static double max(double a, double b)
static float max(float a, float b)
static double random() : 0.0부터~1.0전까지 임의의 double값을 반환한다. 
static double rint(double a) : 주어진 double값과 가장 가까운 정수값을 double형으로 리턴
static long round(double a) : 소수점 첫째자리에서 반올림한 정수값(long)을 리턴
static long round(float a)

wrapper클래스
-> 기본형을 클래스로 정의한 것, 기본형 값도 객체로 다뤄져야 할 때가 있다
boolean : Boolean
char : Character
byte : Byte
short : Short
int : Integer
long : Long
float : Float
double : Double

-> Boolean클래스를 제외한 나머지 클래스들에는 각 자료형들의 최대값(MAX_VALUE)과 최소값(MIN_VALUE)이 상수로 저장되어 있음
-> 타입의 크기는 SIZE라는 상수로 알 수 있다(비트단위)
-> 모든 wrapper클래스는 내부적으로 기본형(primitive type)변수를 가지고 있다
-> 모든 wrapper클래스는 String처럼 equals()가 오버라이딩 되어있다

Number클래스
-> 숫자를 멤버변수로 갖는 클래스의 조상(추상클래스)

BigInteger클래스(Number클래스를 상속받음)
-> long타입으로 표현할 수 없는 큰 정수를 다룰 때

BigDecimal(Number클래스를 상속받음)
-> double타입으로 표현할 수 없는 큰 부동소수점수를 다룰 때

BigInteger와 BigDecimal클래스는 java.math 패키지에 들어있다
(내부적으로 배열을 이용해서 값을 저장하고 있어서 큰 수를 다룰 수 있는것)



[---컬렉션 프레임웍---]

컬렉션
-> 여러 객체(데이터)를 모아 놓은 것을 의미

프레임워크=라이브러리+프로그래밍 방식
-> 표준화, 정형화된 체계적인 프로그래밍 방식

컬렉션 프레임웍
-> 컬렉션(다수의 객체)을 다루기 위한 표준화된 프로그래밍 방식
-> 컬렉션을 쉽고 편리하게 다룰 수 있는 다양한 클래스를 제공
-> java.util.vozlwldp vhgka(JDK 1.2부터 제공)

컬렉션 클래스
-> 다수의 데이터를 저장할 수 있는 클래스(Vector, ArrayList, HashSet)

컬렉션 프레임워크의 핵심 인터페이스
->리스트, 셋, 맵
List(ArrayList, LinkedList, Stack, Vector) : 순서가 있는 데이터의 집합, 중복 허용
Set(HashSet, TreeSet) : 순서를 유지하지 않는 데이터의 집합, 데이터의 중복 허용하지 않음
Map(HashMap, TreeMap, Hashtable, Properties) : 키(key)와 값(value)의 쌍으로 이루어진 데이터의 집합
순서는 유지되지 않으며, 키는 중복을 허용하지 않고, 값은 중복을 허용한다

List와 Set은 Collection 인터페이스를 상속받는다

Collection인터페이스의 메소드

boolean add(Object o) : 지정된 객체 또는 Collection의 객체들을 Collection에 추가
boolean addAll(Collection c)
void clear() : Collection의 모든 객체를 삭제
boolean contains(Object o) : 지정된 객체 또는 Collection의 객체들이 Collection에 포함되어 있는지 확인
boolean containsAll(Collection c)
boolean equals(Object o) : 동일한 Collection인지 비교
int hashCode() : Collection의 hash code를 반환한다
boolean isEmpty() : Collection이 비어있는지 확인
Iterator iterator() : Collection의 iterator를 반환
boolean remove(Object o) : 지정된 객체를 삭제한다
boolean removeAll(collection c) : 지정된 Collection에 포함된 객체들을 삭제한다
boolean retainAll(Collection c) : 지정된 Collection에 포함된 객체만을 남기고 다른 객체들은 Collection에서 삭제한다,
이 작업으로 Collection에 변화가 있으면 true를 리턴 아니면 false
int size() : Collection에 저장된 객체의 개수를 리턴
Object[] toArray() : Collection에 저장된 객체를 객체배열(Object[])로 반환한다
Object[] toArray(Object[] a) : 지정된 배열에 Collection의 객체를 저장해서 반환한다

List인터페이스의 메소드(순서O 중복O)
-> Vector(Stack은 Vector를 상속), ArrayList, LinkedList

Object<-AbstractCollection<-AbstractList<-vector
         <-Collection	<-List	   <-



void add(int index, Object element) : 지정된 index에 객체 또는 컬렉션에 포함된 객체들을 추가한다
boolean addAll(int index, Collection c)
Object get(int index) : 지정된 index에 있는 객체를 반환한다
int indexOf(Object o) : 지정된 객체의 index를 리턴(앞에서부터 찾는다)
int lastLndexOf(Object o) : 지정된 객체의 index를 리턴(뒤에서 부터 찾는다)
ListIterator listIterator() : List의 객체에 접근할 수 있는 ListIterator를 리턴
LIstIterator listIterator(int index)
Object remove(int index) : index에 있는 객체를 삭제하고 삭제된 객체를 리턴
Object set(int index, Object element) : index에 객체를 저장한다
void sort(Comparator c) : 지정된 비교자로 List를 정렬
List subList(int fromIndex, int toIndex) : fromIndex부터 toIndex에 있는 객체를 리턴

Set인터페이스

Set인터페이스에만 있는 메소드

boolean addAll(Collection c) : 지정된 Collection의 객체들을 Collection에 추가한다(합집합)
boolean contrainAll(Collection c) : 지정된 Collection 객체들이 Collection에 포함되어 있는지 확인한다(부분집합)
boolean removeAll(Collection c) : 지정된 Collection에 포함된 객체들을 삭제한다(차집합)
boolean retainAll(Collection c) : 지정된 Collection에 포함된 객체만을 남기고 나머지는 Collection에서 삭제한다(교집합)


Map인터페이스

Map인터페이스의 메소드

void clear() : Map의 모든 객체를 삭제한다
boolean containsKey(Object key) : 지정된 key객체와 일치하는 Map의 key객체가 있는지 확인한다
boolean containsValue(Object value) : 지정된 value객체와 일치하는 Map의 key객체가 있는지 확인한다
Set entrySet() : Map에 저장되어 있는 key-value쌍을 Map.Entry타입의 객체로 저장한 Set으로 리턴
boolean equals(Object o) : 동일한 Map인지 비교한다
Object get(Object key) : 지정한 key객체에 대응하는 value객체를 찾아서 리턴
int hashCode() : 해시코드를 리턴
boolean isEmpty() : Map이 비어있는지 확인
Set keySet() : Map에 저장된 모든 key객체를 리턴
Object put(Object key, Object value) : Map에 value객체를 key객체로 연결하여 저장한다
void putAll(Map t) : 지정된 Map의 모든 key-value쌍을 추가한다
Object remove(Object key) : 지정한 key객체와 일치하는 key-value객체를 삭제한다
int size() : Map에 저장된 key-value쌍의 개수를 리턴
Collection values() : Map에 저장된 모든 value객체를 리턴